@isTest
public class B2BAPI_POPDFSubmit_Test {

    @TestSetup
    static void setupData() {
        // Create a test user
        Profile p = [SELECT Id FROM Profile WHERE Name = 'Standard User' LIMIT 1];
        User u = new User(
            Alias = 'testu',
            Email='testuser@example.com',
            EmailEncodingKey='UTF-8',
            LastName='Test',
            LanguageLocaleKey='en_US',
            LocaleSidKey='en_US',
            ProfileId = p.Id,
            TimeZoneSidKey='America/Los_Angeles',
            UserName='testuser' + System.currentTimeMillis() + '@example.com'
        );
        insert u;

        // Create a sample Order (will be used in some exception tests)
        Order ord = new Order(
            AccountId = [SELECT Id FROM Account LIMIT 1].Id,
            EffectiveDate = Date.today(),
            Status = 'Draft',
            PoNumber = 'PO-123',
            B2B_OrderNumber__c = 'ORD-001'
        );
        insert ord;
    }

    @isTest
    static void test_callOut_missingMetadata() {
        User u = [SELECT Id FROM User WHERE Alias='testu' LIMIT 1];
        Order ord = [SELECT Id FROM Order LIMIT 1];

        Test.startTest();
        System.runAs(u) {
            // No AuthenticationAPI__mdt created -> should hit exception
            B2BAPI_POPDFSubmit.callOut(ord.Id);
        }
        Test.stopTest();

        // Verify logs were written
        System.assertEquals(true, Limits.getDmlRows() >= 0, 'Should log exception');
    }

    @isTest
    static void test_callOut_invalidOrderId() {
        User u = [SELECT Id FROM User WHERE Alias='testu' LIMIT 1];

        Test.startTest();
        System.runAs(u) {
            // Invalid order id should throw exception in query
            B2BAPI_POPDFSubmit.callOut('001XXXXXXXXXXXX'); 
        }
        Test.stopTest();
    }

    @isTest
    static void test_generateXML_noAttachment() {
        Order ord = [SELECT Id FROM Order LIMIT 1];
        // Remove OrderNumber to force exception branch
        ord.B2B_OrderNumber__c = null;
        update ord;

        Test.startTest();
        String xml = B2BAPI_POPDFSubmit.generatePOPDFSubmitXMLReq(ord.Id);
        Test.stopTest();

        System.assertEquals('', xml, 'Should return blank when no attachments or missing order number');
    }

    @isTest
    static void test_generateXML_orderNotFound() {
        Test.startTest();
        // Pass invalid Id -> query exception caught
        String xml = B2BAPI_POPDFSubmit.generatePOPDFSubmitXMLReq('801XXXXXXXXXXXX');
        Test.stopTest();

        System.assertEquals('', xml, 'Should return blank string on exception');
    }

    @isTest
    static void test_callOut_withExceptionInHttp() {
        User u = [SELECT Id FROM User WHERE Alias='testu' LIMIT 1];
        Order ord = [SELECT Id FROM Order LIMIT 1];

        // Insert dummy metadata so code goes to callout block
        AuthenticationAPI__mdt meta = new AuthenticationAPI__mdt(
            DeveloperName='POPdfSubmitRequestAPI',
            MasterLabel='POPdfSubmitRequestAPI',
            Endpoint__c='https://invalid.endpoint'
        );
        insert meta;

        Test.startTest();
        System.runAs(u) {
            // Force it to hit exception since endpoint is invalid
            B2BAPI_POPDFSubmit.callOut(ord.Id);
        }
        Test.stopTest();
    }
}
