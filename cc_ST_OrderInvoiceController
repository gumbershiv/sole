/**
 * Class Name      : B2B_OrderInvoiceController
 * Description     : This API class is used to fetch PIds of Order Invoices from IDM.
 * Created By      : Sangeet Shekhar
 * Modified By     : [Your Name]
 * Modified On     : [Today's Date]
 * Change Summary  : Replaced cc_ST_ with B2B_ and refactored to use B2BActionResponse.
 */
global without sharing class B2B_OrderInvoiceController {

    global B2B_OrderInvoiceController(B2B_OrderLineItems obj) {}
    global B2B_OrderInvoiceController() {}

    /**
     * Method Name    : fetchOrderInvoices
     * Description    : Fetches PIds of Order Invoices from IDM.
     * Input          : orderLNID (Order Line Item Id)
     * Return Type    : B2BActionResponse
     */
    @RemoteAction
    global static B2BActionResponse fetchOrderInvoices(String orderLNID) {
        try {
            String reqBody = '';
            Integer count = 1;
            List<OrderInvoiceWrapper> orderInvoiceWrapperList = new List<OrderInvoiceWrapper>();

            // Fetch endpoint from Custom Metadata
            AuthenticationAPI__mdt metaDataEndPoint = [
                SELECT Endpoint__c FROM AuthenticationAPI__mdt WHERE DeveloperName = 'QuoteDetailPDFAPI'
            ];
            String endpoint = metaDataEndPoint.Endpoint__c;
            endpoint = endpoint.replaceAll('search/item/resource/stream', '');
            endpoint += System.Label.cc_ST_OrderInvoiceurlParam1 + orderLNID + System.Label.cc_ST_OrderInvoiceUrlParam2;

            HttpResponse res = callFetchPIDs(endpoint);

            if (res.getStatus() == null && res.getStatusCode() == 0) {
                return new B2BActionResponse(false, 'Error Code: ' + res.getStatus(), null);
            } else if (res.getStatusCode() != 200) {
                return new B2BActionResponse(false, 'Error Code: ' + res.getStatus(), null);
            }

            reqBody = res.getBody();
            DOM.Document doc = new DOM.Document();
            doc.load(reqBody);
            DOM.XmlNode rootNode = doc.getRootElement();

            parseXML(rootNode, count, orderInvoiceWrapperList);
            return new B2BActionResponse(true, 'Order invoices fetched successfully.', orderInvoiceWrapperList);

        } catch (Exception ex) {
            String errorMsg = 'Exception at line ' + ex.getLineNumber() + ': ' + ex.getMessage();
            System.debug(errorMsg);
            return new B2BActionResponse(false, errorMsg, null);
        }
    }

    /**
     * Method Name    : callFetchPIDs
     * Description    : Makes HTTP GET callout to fetch invoice XML data.
     * Input          : endpoint (URL to call)
     * Return Type    : HttpResponse
     */
    public static HttpResponse callFetchPIDs(String endpoint) {
        HttpResponse res = new HttpResponse();
        try {
            Map<String, String> requestHeader = B2B_LNServiceCallout.getAuthAccessMap();
            if (!Test.isRunningTest()) {
                res = B2B_ConstructorServiceCallout.callWebservice(endpoint, 'GET', 'text/xml', '', requestHeader);
            } else {
                res = B2B_ServiceCallout.callWebservice(B2B_StaticConstants.TEST_VERTEX_API_ENDPOINT, 'GET', '', '', requestHeader);
            }
        } catch (Exception e) {
            System.debug('Exception in callFetchPIDs HTTP Callout: ' + e.getMessage() + ' at line: ' + e.getLineNumber());
        }
        return res;
    }

    /**
     * Method Name    : parseXML
     * Description    : Recursively parses XML and extracts PId values into the list.
     */
    public static void parseXML(DOM.XMLNode node, Integer count, List<OrderInvoiceWrapper> orderInvoiceWrapperList) {
        try {
            if (node.getName() == 'pid') {
                OrderInvoiceWrapper orderInvoice = new OrderInvoiceWrapper();
                orderInvoice.PId = node.getText().trim();
                orderInvoiceWrapperList.add(orderInvoice);
            }

            for (Dom.XMLNode child : node.getChildElements()) {
                if (node.getName() == 'pid') {
                    count++;
                }
                parseXML(child, count, orderInvoiceWrapperList);
            }
        } catch (Exception e) {
            System.debug('Exception in parseXML: ' + e.getMessage() + ' at line: ' + e.getLineNumber());
        }
    }

    /**
     * DTO class for holding parsed invoice data.
     */
    global class OrderInvoiceWrapper {
        global String invoiceId;
        global String PId;
    }
}
