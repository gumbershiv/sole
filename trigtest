@IsTest
public class B2BProductCollectionHandlerTest {

    // --- Shared Test Data Factory ---
    private class TestDataFactory {
        public static Id account1Id;
        public static Id account2Id;
        public static Id lineItemId;

        @testSetup
        static void setupData() {
            // Accounts
            Account acc1 = new Account(Name = 'Account 1');
            insert acc1;
            account1Id = acc1.Id;

            Account acc2 = new Account(Name = 'Account 2');
            insert acc2;
            account2Id = acc2.Id;

            // One line item to be updated
            ProductCollectionLineItem__c li = new ProductCollectionLineItem__c(
                Name = 'Test Line Item',
                B2B_TotalPrice__c = 0
            );
            insert li;
            lineItemId = li.Id;
        }

        public static ProductCollection__c makeCollection(Id accountId, String storeId) {
            ProductCollection__c pc = new ProductCollection__c(
                Name = 'Test Collection',
                AccountId__c = accountId,
                Store__c = storeId
            );
            insert pc;
            return pc;
        }
    }

    // --- TEST METHODS ---

    @IsTest
    static void testUpdateCollectionItemPrices_Insert() {
        Test.startTest();
        ProductCollection__c pc = TestDataFactory.makeCollection(TestDataFactory.account1Id, 'WS123');
        // call helper directly
        B2BProductCollectionHandler.updateCollectionItemPrices(
            new List<ProductCollection__c>{ pc },
            null
        );
        Test.stopTest();

        ProductCollectionLineItem__c li = [
            SELECT Id, B2B_TotalPrice__c 
            FROM ProductCollectionLineItem__c 
            WHERE Id = :TestDataFactory.lineItemId
        ];
        System.assertEquals(200, li.B2B_TotalPrice__c, 
            'Total price should be updated (2*100)');
    }

    @IsTest
    static void testUpdateCollectionItemPrices_UpdateAccount() {
        ProductCollection__c pc = TestDataFactory.makeCollection(TestDataFactory.account1Id, 'WS999');
        ProductCollection__c oldPc = pc.clone(false, true, true, true);
        oldPc.AccountId__c = TestDataFactory.account1Id;

        pc.AccountId__c = TestDataFactory.account2Id;

        Test.startTest();
        B2BProductCollectionHandler.updateCollectionItemPrices(
            new List<ProductCollection__c>{ pc },
            new Map<Id, ProductCollection__c>{ oldPc.Id => oldPc }
        );
        Test.stopTest();

        ProductCollectionLineItem__c li = [
            SELECT Id, B2B_TotalPrice__c 
            FROM ProductCollectionLineItem__c 
            WHERE Id = :TestDataFactory.lineItemId
        ];
        System.assertEquals(200, li.B2B_TotalPrice__c, 
            'Should still update after account change');
    }

    @IsTest
    static void testUpdateCollectionItemPrices_NoAccount() {
        ProductCollection__c pc = new ProductCollection__c(Name = 'No Account');

        insert pc;

        Test.startTest();
        B2BProductCollectionHandler.updateCollectionItemPrices(
            new List<ProductCollection__c>{ pc },
            null
        );
        Test.stopTest();

        ProductCollectionLineItem__c li = [
            SELECT Id, B2B_TotalPrice__c 
            FROM ProductCollectionLineItem__c 
            WHERE Id = :TestDataFactory.lineItemId
        ];
        System.assertEquals(0, li.B2B_TotalPrice__c, 
            'No update should happen when AccountId is null');
    }
}
