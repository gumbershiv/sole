@IsTest
public class ProductCollectionTriggerTest {

    @testSetup
    static void setupData() {
        WebStore ws = B2B_TestDataFactory.createWebStore();

        Account acc1 = B2B_TestDataFactory.createAccount(true);
        Account acc2 = B2B_TestDataFactory.createAccount(false);
        acc2.Name = 'TriggerTestAccount2';
        insert acc2;

        Contact c = B2B_TestDataFactory.createContact(acc1);
        User u = B2B_TestDataFactory.createCommunityUser(c, 'triggeruser@test.com');

        Product2 p = B2B_TestDataFactory.createProduct2();
        p.B2B_PACK_QUANTITY__c = 1;
        p.B2B_UNITS__c = 'EA';
        update p;

        System.runAs(u) {
            ProductCollection__c pc = B2B_TestDataFactory.createProductCollection(ws.Id, acc1.Id);
            B2B_TestDataFactory.createProductCollectionLineItem(p.Id, pc.Id);
        }
    }

    @IsTest
    static void testTrigger_AfterInsert() {
        Test.startTest();
        // Insert another collection to fire trigger
        WebStore ws = [SELECT Id FROM WebStore LIMIT 1];
        Account acc1 = [SELECT Id FROM Account LIMIT 1];
        ProductCollection__c pc = B2B_TestDataFactory.createProductCollection(ws.Id, acc1.Id);
        insert pc;
        Test.stopTest();

        ProductCollectionLineItem__c li = [
            SELECT Id, B2B_TotalPrice__c 
            FROM ProductCollectionLineItem__c 
            LIMIT 1
        ];
        System.assertNotEquals(0, li.B2B_TotalPrice__c,
            'Trigger should update total price after insert');
    }

    @IsTest
    static void testTrigger_AfterUpdate_AccountChange() {
        ProductCollection__c pc = [SELECT Id, AccountId__c FROM ProductCollection__c LIMIT 1];
        Account acc2 = [SELECT Id FROM Account WHERE Name = 'TriggerTestAccount2' LIMIT 1];
        
        Test.startTest();
        pc.AccountId__c = acc2.Id;
        update pc; // fires trigger
        Test.stopTest();

        ProductCollectionLineItem__c li = [
            SELECT Id, B2B_TotalPrice__c 
            FROM ProductCollectionLineItem__c 
            LIMIT 1
        ];
        System.assertNotEquals(0, li.B2B_TotalPrice__c,
            'Trigger should still update after account change');
    }

    @IsTest
    static void testTrigger_NoAccount() {
        Test.startTest();
        ProductCollection__c pc = new ProductCollection__c(Name = 'TriggerTest_NoAccount');
        insert pc; // no AccountId__c, should do nothing
        Test.stopTest();

        ProductCollectionLineItem__c li = [
            SELECT Id, B2B_TotalPrice__c 
            FROM ProductCollectionLineItem__c 
            LIMIT 1
        ];
        System.assertEquals(0, li.B2B_TotalPrice__c,
            'Trigger should not update when AccountId is null');
    }

    @IsTest
    static void testTrigger_BulkInsertUpdate() {
        WebStore ws = [SELECT Id FROM WebStore LIMIT 1];
        Account acc1 = [SELECT Id FROM Account LIMIT 1];

        List<ProductCollection__c> bulkCollections = new List<ProductCollection__c>();
        for (Integer i = 0; i < 5; i++) {
            bulkCollections.add(B2B_TestDataFactory.createProductCollection(ws.Id, acc1.Id));
        }

        Test.startTest();
        insert bulkCollections; // after insert fires

        for (ProductCollection__c pc : bulkCollections) {
            pc.AccountId__c = acc1.Id; // dummy update to fire trigger
        }
        update bulkCollections; // after update fires
        Test.stopTest();

        // Verify line items exist for at least one collection
        List<ProductCollectionLineItem__c> lis = [
            SELECT Id, B2B_TotalPrice__c 
            FROM ProductCollectionLineItem__c 
            LIMIT 5
        ];
        System.assert(!lis.isEmpty(), 'Bulk trigger execution should update line items');
    }
}
