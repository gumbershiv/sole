/**
 * @author      Ting Li
 * @company     Capgemini
 * @description This class contains product service
 * @created     2021-08-19
 * @version     1.0
 * @since       52.0 (Force.com ApiVersion)
 */
// TODO Add comment
public without sharing class B2BProductService {

    /**
     * @description This method is used to get product map by list of product sku
     *
     * @param skus  list of product sku
     * 
     * @return mapping of sku to product
     */
    public Map<String, B2bUtilProduct.ProductData> getSkuToProductMap(List<String> skus, Id webstoreId, String effectiveAccountId) {
        Map<String, B2bUtilProduct.ProductData> skuToProduct2Map = new Map<String, B2bUtilProduct.ProductData>();
        
        // Split SKUs into two chunks
        List<String> firstChunk = new List<String>();
        List<String> secondChunk = new List<String>();
        
        // Ensure that the first chunk has a maximum of 500 SKUs
        for (Integer i = 0; i < Math.min(500, skus.size()); i++) {
            firstChunk.add(skus[i]);
        }
        
        // The second chunk will have the remaining SKUs if there are more than 500
        for (Integer i = 500; i < skus.size(); i++) {
            secondChunk.add(skus[i]);
        }
        
        // Fetch product data for the first chunk
        List<B2bUtilProduct.ProductData> productData = B2bUtilProduct.getProductsBySku(webstoreId, effectiveAccountId, firstChunk, null, true, true, true);
        
        // If there are remaining SKUs in the second chunk, fetch them
        if (!secondChunk.isEmpty()) {
            system.debug('secondChunk'+ secondChunk );
            productData.addAll(B2bUtilProduct.getProductsBySku(webstoreId, effectiveAccountId, secondChunk, null, true, true, true));
        }
        
        //List<B2bUtilProduct.ProductData> productData = B2bUtilProduct.getProductsBySku(webStoreId, effectiveAccountId, skus, null, true, false, false);
        for (B2bUtilProduct.ProductData product : productData) {
            skuToProduct2Map.put(B2BUtil.toUpperCase(product.SKU), product);
        }

        return skuToProduct2Map;
    }

}
