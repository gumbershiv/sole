await addToCart ({
            data: dataSet,
            communityId: this.community,
            effectiveAccountId: this.account,
            isNewCart: this.template.querySelector(
                    `[data-id="input-checkbox"]`
                ).checked,
            cartItemLimit: this.valMaxProductAmount,
        })
            .then((result) => {
                console.log(result);

                this.isLoading = false;
                if (result.isSuccess) {
                    showAllSuccessMessage = true;

                    result.data.forEach((element) => {
                        let item = {};
                        item.sku = element.sku;
                        item.qty = element.quantity;

                    //     // Populate itemList from productList dynamically
                    // this.itemList = this.productList.map(item => ({
                    //     sku: item.sku,
                    //     quantity: item.qty,
                    //     isValid: item.isValid // assuming you set this during validation
                    // }));

                        switch (element.message) {
                            case 'ITEM_SUCCESS':
                                element.message = this.labels.msgItemSuccess;
                                break;
                            case 'ERROR_INVALID_SKU':
                                // element.message = this.labels.msgInvalidSku;
                                this.itemList.push({
                                    sku: element.sku,
                                    quantity: element.quantity,
                                });
                                // this.itemList.push(item);
                                break;
                            case 'ERROR_INVALID_QUANTITY':
                                element.message = this.labels.msgInvalidQty;
                                break;
                            case 'ERROR_DUPLICATE_SKU':
                                element.message = this.labels.msgDuplicateSku;
                                break;
                            case 'ERROR_QUANTITY_RULES':
                                let arrs = [
                                    element.minimum,
                                    element.maximum,
                                    element.increment,
                                ];
                                element.message = String.format(
                                    this.labels.msgInvalidQtyRules,
                                    arrs
                                );
                                break;
                            default:
                                element.message = element.message;
                        }

                        item.notes = element.message;
                        item.notesColor = element.isSuccess
                            ? 'slds-text-color_success'
                            : 'slds-text-color_error';
                        if (element.isSuccess) {
                            successData.push(item);
                        } else {
                            errorData.push(item);
                            showAllSuccessMessage = false;
                        }
                    });

                    console.log('itemlist:',this.itemList);
                    this.tableData = errorData.concat(successData);

                    if (showAllSuccessMessage) {
                        toastUtil.toastSuccess(this, {
                            message: this.labels.msgAddToCartAllSuccess,
                        });
                    } else {
                        toastUtil.toastInfo(this, {
                            message: this.labels.msgAddToCartNotAllSuccess,
                        });
                    }

                    if (this.tableData.length > 0) {
                        this.showResultTable = true;
                        this.showInputForm = false;
                    }

                    const eventData = {
                        webstoreId: this.store,
                        accountId: this.account,
                        pageParam: null,
                    };
                    console.log('eventData', eventData);
                    fireEvent(this.pageRef, 'retrieveCart', eventData);
                } else {
                    this.showResultTable = false;
                    this.showInputForm = true;
                    if ((result.message = 'ERROR_UPLOAD_LIMIT')) {
                        result.message = this.labels.msgUploadLimit;
                    }
                    toastUtil.toastError(this, { message: result.message });
                }
            })
            .catch((error) => {
                console.error('error', error);
                this.isLoading = false;
                this.showResultTable = false;
                this.showInputForm = true;
                let message = error && error.body && error.body.message;
                toastUtil.toastError(this, { message: message });
            });
    }
