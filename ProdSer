public Map<String, B2bUtilProduct.ProductData> getSkuToProductMap(List<String> skus, Id webstoreId, String effectiveAccountId) {
    Map<String, B2bUtilProduct.ProductData> skuToProduct2Map = new Map<String, B2bUtilProduct.ProductData>();

    if (skus == null || skus.isEmpty()) return skuToProduct2Map;

    // Clean SKUs (~ to actual SKU)
    List<String> cleanedSkus = new List<String>();
    for (String sku : skus) {
        cleanedSkus.add(sku.contains('~') ? sku.split('~')[0] : sku);
    }

    Integer batchSize = 500;
    List<String> currentBatch = new List<String>();

    for (Integer i = 0; i < cleanedSkus.size(); i++) {
        currentBatch.add(cleanedSkus[i]);

        // Process batch when full or at the end
        if (currentBatch.size() == batchSize || i == cleanedSkus.size() - 1) {
            List<B2bUtilProduct.ProductData> products = B2bUtilProduct.getProductsBySku(
                webstoreId,
                effectiveAccountId,
                currentBatch,
                null,
                true,
                true,
                true
            );

            if (products != null) {
                for (B2bUtilProduct.ProductData product : products) {
                    skuToProduct2Map.put(B2BUtil.toUpperCase(product.SKU), product);
                }
            }

            // Reset batch
            currentBatch.clear();
        }
    }

    return skuToProduct2Map;
}