public Map<String, B2bUtilProduct.ProductData> getSkuToProductMap(List<String> skus, Id webstoreId, String effectiveAccountId) {
    Map<String, B2bUtilProduct.ProductData> skuToProduct2Map = new Map<String, B2bUtilProduct.ProductData>();
    if (skus == null || skus.isEmpty()) return skuToProduct2Map;

    // Clean the SKUs (~ to actual SKU)
    List<String> cleanedSkus = new List<String>();
    for (String sku : skus) {
        cleanedSkus.add(sku.contains('~') ? sku.split('~')[0] : sku);
    }

    Integer batchSize = 500;
    Integer totalSkus = cleanedSkus.size();

    for (Integer start = 0; start < totalSkus; start += batchSize) {
        Integer end = Math.min(start + batchSize, totalSkus);
        List<String> skuBatch = new List<String>(cleanedSkus.subList(start, end));

        List<B2bUtilProduct.ProductData> batchResults = B2bUtilProduct.getProductsBySku(
            webstoreId, 
            effectiveAccountId, 
            skuBatch, 
            null, 
            true, 
            true, 
            true
        );

        if (batchResults != null) {
            for (B2bUtilProduct.ProductData product : batchResults) {
                skuToProduct2Map.put(B2BUtil.toUpperCase(product.SKU), product);
            }
        }
    }

    return skuToProduct2Map;
}