@isTest
public class B2BCyberSourceUtilityTest {

    @testSetup
    static void setupData() {
        B2B_CyberSource_Payment_Endpoint__mdt mdt = new B2B_CyberSource_Payment_Endpoint__mdt(
            DeveloperName = 'B2B_CyberSource_REST_CaptureAPI_Endpoint',
            MasterLabel = 'Test Metadata',
            B2B_PaymentEndpointURI__c = '/test/payment',
            B2B_Host__c = 'apitest.cybersource.com',
            B2B_MerchantId__c = 'test_merchant_id',
            B2B_KeyId__c = 'test_key_id',
            B2B_SharedKey__c = EncodingUtil.base64Encode(Blob.valueOf('test_shared_key'))
        );
        insert mdt;
    }

    @isTest
    static void testCaptureAndLogPayment_Success() {
        Test.setMock(HttpCalloutMock.class, new MockCyberSourceCallout());

        B2B_Invoice__c invoice = new B2B_Invoice__c(
            Name = 'INV-123',
            B2B_Amount__c = 500.00
        );
        insert invoice;

        Test.startTest();
        B2BCyberSourceUtility.CaptureAndLogPaymentResponseWrapper result =
            B2BCyberSourceUtility.CaptureAndLogPayment(invoice, 'cust123');
        Test.stopTest();

        System.assertNotEquals(null, result);
        System.assertEquals(true, result.isPaymentCaptured);
        System.assertEquals('1234567890', result.transactionId);
        System.assertEquals('cust123', result.customerId);
    }

    @isTest
    static void testCaptureAndLogPayment_HttpError() {
        Test.setMock(HttpCalloutMock.class, new ErrorMock());

        B2B_Invoice__c invoice = new B2B_Invoice__c(
            Name = 'INV-456',
            B2B_Amount__c = 750.00
        );
        insert invoice;

        Test.startTest();
        B2BCyberSourceUtility.CaptureAndLogPaymentResponseWrapper result =
            B2BCyberSourceUtility.CaptureAndLogPayment(invoice, 'cust456');
        Test.stopTest();

        System.assertNotEquals(null, result);
        System.assertEquals(false, result.isPaymentCaptured);
        System.assertEquals(null, result.transactionId);
    }

    @isTest
    static void testCaptureAndLogPayment_Exception() {
        Test.setMock(HttpCalloutMock.class, new ExceptionMock());

        B2B_Invoice__c invoice = new B2B_Invoice__c(
            Name = 'INV-999',
            B2B_Amount__c = 1200.00
        );
        insert invoice;

        Test.startTest();
        B2BCyberSourceUtility.CaptureAndLogPaymentResponseWrapper result =
            B2BCyberSourceUtility.CaptureAndLogPayment(invoice, 'cust999');
        Test.stopTest();

        System.assertNotEquals(null, result);
        System.assertEquals(false, result.isPaymentCaptured);
    }

    // ==========================
    // === Mock Callout Classes
    // ==========================

    private class MockCyberSourceCallout implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setStatusCode(200);
            res.setHeader('Content-Type', 'application/json');
            res.setBody(JSON.serialize(new Map<String, Object>{
                'id' => '1234567890',
                'paymentInformation' => new Map<String, Object>{
                    'customer' => new Map<String, Object>{ 'customerId' => 'cust123' },
                    'id' => 'cust123'
                }
            }));
            return res;
        }
    }

    private class ErrorMock implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setStatusCode(400);
            res.setHeader('Content-Type', 'application/json');
            res.setBody(JSON.serialize(new Map<String, Object>{
                'errorInformation' => new Map<String, Object>{ 'reason' => 'INVALID_REQUEST' }
            }));
            return res;
        }
    }

    private class ExceptionMock implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            throw new CalloutException('Simulated failure');
        }
    }
}
